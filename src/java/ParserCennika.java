/* ParserCennika.java */
/* Generated By:JavaCC: Do not edit this line. ParserCennika.java */
import java.io.PrintStream;

class ParserCennika implements ParserCennikaConstants {

    double previousValue;

        public static void main(String[] args) throws ParseException, TokenMgrError, NumberFormatException {
                ParserCennika parser = new ParserCennika(System.in);
                parser.start(System.out);
        }

  final public void start(PrintStream printStream) throws ParseException, NumberFormatException {
    Date(printStream);
    GroupName(printStream);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRODUCT_LABEL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ProcessorProduct(printStream);
    }
    GroupName(printStream);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRODUCT_LABEL:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      MemoryProduct(printStream);
    }
    GroupName(printStream);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRODUCT_LABEL:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      GraphicCardProduct(printStream);
    }
    jj_consume_token(0);
  }

  final public void Date(PrintStream printStream) throws ParseException, NumberFormatException {Token t;
    String year, month, day;
    jj_consume_token(DATE_LABEL);
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
year = t.image;
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
month= t.image;
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
day = t.image;
printStream.println("Data : " + year + "-" + month + "-" + day);
  }

  final public void GroupName(PrintStream printStream) throws ParseException, NumberFormatException {Token t;
    String groupName;
    jj_consume_token(GROUP_LABEL);
    jj_consume_token(DELIMITER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROCESSOR_GROUP:{
      jj_consume_token(PROCESSOR_GROUP);
printStream.println("Procesory: \u005cn");
      break;
      }
    case MEMORY_GROUP:{
      jj_consume_token(MEMORY_GROUP);
printStream.println("Pamieci: \u005cn");
      break;
      }
    case GRAPHIC_CARDS_GROUP:{
      jj_consume_token(GRAPHIC_CARDS_GROUP);
printStream.println("Karty graficzne: \u005cn");
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProcessorProduct(PrintStream printStream) throws ParseException, NumberFormatException {Token t;
    jj_consume_token(PRODUCT_LABEL);
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Producent: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Model: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Rdzenie: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Symbol: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Czestotliwosc: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("L1: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("L2: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("L3: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Cena: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Opakowanie: " + t.image + "\u005ct\u005cn");
  }

  final public void MemoryProduct(PrintStream printStream) throws ParseException, NumberFormatException {Token t;
    String value;
    jj_consume_token(PRODUCT_LABEL);
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Producent: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Model: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Rodzaj pamieci: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Pamiec (GB): " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Taktowanie: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Napiecie: " + t.image + "\u005ct\u005cn");
  }

  final public void GraphicCardProduct(PrintStream printStream) throws ParseException, NumberFormatException {Token t;
    jj_consume_token(PRODUCT_LABEL);
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Producent: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Model: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Ilosc pamieci (GB): " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Rodzaj pamieci: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Taktowanie pamieci g.: " + t.image + "\u005ct");
    jj_consume_token(DELIMITER);
    t = jj_consume_token(ANY);
printStream.print("Taktowanie rdzenia: " + t.image + "\u005ct\u005cn");
  }

  /** Generated Token Manager. */
  public ParserCennikaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x100,0x100,0xe00,};
   }

  /** Constructor with InputStream. */
  public ParserCennika(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserCennika(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserCennikaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserCennika(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserCennikaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserCennika(ParserCennikaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserCennikaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
